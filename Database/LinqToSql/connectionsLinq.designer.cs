#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TexasHoldem.Database.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataBaseSadna")]
	public partial class connectionsLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertUserTable(UserTable instance);
    partial void UpdateUserTable(UserTable instance);
    partial void DeleteUserTable(UserTable instance);
    partial void InsertGameMode(GameMode instance);
    partial void UpdateGameMode(GameMode instance);
    partial void DeleteGameMode(GameMode instance);
    partial void InsertGameRoom(GameRoom instance);
    partial void UpdateGameRoom(GameRoom instance);
    partial void DeleteGameRoom(GameRoom instance);
    partial void InsertGameRoomPreferance(GameRoomPreferance instance);
    partial void UpdateGameRoomPreferance(GameRoomPreferance instance);
    partial void DeleteGameRoomPreferance(GameRoomPreferance instance);
    partial void InsertLeagueName(LeagueName instance);
    partial void UpdateLeagueName(LeagueName instance);
    partial void DeleteLeagueName(LeagueName instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPriorityLogEnum(PriorityLogEnum instance);
    partial void UpdatePriorityLogEnum(PriorityLogEnum instance);
    partial void DeletePriorityLogEnum(PriorityLogEnum instance);
    partial void InsertSpectetorGamesOfUser(SpectetorGamesOfUser instance);
    partial void UpdateSpectetorGamesOfUser(SpectetorGamesOfUser instance);
    partial void DeleteSpectetorGamesOfUser(SpectetorGamesOfUser instance);
    partial void InsertSystemLog(SystemLog instance);
    partial void UpdateSystemLog(SystemLog instance);
    partial void DeleteSystemLog(SystemLog instance);
    partial void InsertUserActiveGame(UserActiveGame instance);
    partial void UpdateUserActiveGame(UserActiveGame instance);
    partial void DeleteUserActiveGame(UserActiveGame instance);
    partial void InsertUserReplaySavedGame(UserReplaySavedGame instance);
    partial void UpdateUserReplaySavedGame(UserReplaySavedGame instance);
    partial void DeleteUserReplaySavedGame(UserReplaySavedGame instance);
    #endregion
		
		public connectionsLinqDataContext() : 
				base(global::TexasHoldem.Properties.Settings.Default.DataBaseSadnaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public connectionsLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public connectionsLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public connectionsLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public connectionsLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<UserTable> UserTables
		{
			get
			{
				return this.GetTable<UserTable>();
			}
		}
		
		public System.Data.Linq.Table<GameMode> GameModes
		{
			get
			{
				return this.GetTable<GameMode>();
			}
		}
		
		public System.Data.Linq.Table<GameRoom> GameRooms
		{
			get
			{
				return this.GetTable<GameRoom>();
			}
		}
		
		public System.Data.Linq.Table<GameRoomPreferance> GameRoomPreferances
		{
			get
			{
				return this.GetTable<GameRoomPreferance>();
			}
		}
		
		public System.Data.Linq.Table<LeagueName> LeagueNames
		{
			get
			{
				return this.GetTable<LeagueName>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<PriorityLogEnum> PriorityLogEnums
		{
			get
			{
				return this.GetTable<PriorityLogEnum>();
			}
		}
		
		public System.Data.Linq.Table<SpectetorGamesOfUser> SpectetorGamesOfUsers
		{
			get
			{
				return this.GetTable<SpectetorGamesOfUser>();
			}
		}
		
		public System.Data.Linq.Table<SystemLog> SystemLogs
		{
			get
			{
				return this.GetTable<SystemLog>();
			}
		}
		
		public System.Data.Linq.Table<UserActiveGame> UserActiveGames
		{
			get
			{
				return this.GetTable<UserActiveGame>();
			}
		}
		
		public System.Data.Linq.Table<UserReplaySavedGame> UserReplaySavedGames
		{
			get
			{
				return this.GetTable<UserReplaySavedGame>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddNewUser")]
		public int AddNewUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string avatar, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> points, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> money, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> gamesPlayed, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> leagueName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> winNum, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> highestCashGainInGame, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> totalProfit, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> isActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, username, name, email, password, avatar, points, money, gamesPlayed, leagueName, winNum, highestCashGainInGame, totalProfit, isActive);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditAvatar")]
		public int EditAvatar([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string newAvatar)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newAvatar);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditEmail")]
		public int EditEmail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string newEmail)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newEmail);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditName")]
		public int EditName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string newName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditPassword")]
		public int EditPassword([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string newPassword)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newPassword);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserHighestCashGainInGame")]
		public int EditUserHighestCashGainInGame([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newHighestCashGainInGame)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newHighestCashGainInGame);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserId")]
		public int EditUserId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewUserId", DbType="Int")] System.Nullable<int> newUserId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> oldUserId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), newUserId, oldUserId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserIsActive")]
		public int EditUserIsActive([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> newIsActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newIsActive);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserLeagueName")]
		public int EditUserLeagueName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newLeague)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newLeague);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserMoney")]
		public int EditUserMoney([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newMoney)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newMoney);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUsername")]
		public int EditUsername([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string newUserName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newUserName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserNumOfGamesPlayed")]
		public int EditUserNumOfGamesPlayed([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newNumOfGame)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newNumOfGame);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserPoints")]
		public int EditUserPoints([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newPoints)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newPoints);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserTotalProfit")]
		public int EditUserTotalProfit([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newTotalProfit)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newTotalProfit);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditUserWinNum")]
		public int EditUserWinNum([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newWinNum)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, newWinNum);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllUser")]
		public ISingleResult<GetAllUserResult> GetAllUser()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAllUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserByUserId")]
		public ISingleResult<GetUserByUserIdResult> GetUserByUserId([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<GetUserByUserIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserByUserName")]
		public ISingleResult<GetUserByUserNameResult> GetUserByUserName([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string username)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username);
			return ((ISingleResult<GetUserByUserNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteUserById")]
		public int DeleteUserById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteUserByUserName")]
		public int DeleteUserByUserName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="VarChar(50)")] string userName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllActiveGameRooms")]
		public ISingleResult<GetAllActiveGameRoomsResult> GetAllActiveGameRooms()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAllActiveGameRoomsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertPrefToDb")]
		public int InsertPrefToDb([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> room_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> is_Spectetor, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Min_player_in_room", DbType="Int")] System.Nullable<int> min_player_in_room, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> max_player_in_room, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyInPolicy", DbType="Int")] System.Nullable<int> buyInPolicy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> starting_chip, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> minBet, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="League_name", DbType="Int")] System.Nullable<int> league_name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Game_Mode", DbType="Int")] System.Nullable<int> game_Mode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Game_Id", DbType="Int")] System.Nullable<int> game_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> potSize)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), room_id, is_Spectetor, min_player_in_room, max_player_in_room, buyInPolicy, starting_chip, minBet, league_name, game_Mode, game_Id, potSize);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllSpectableGameRooms")]
		public ISingleResult<GetAllSpectableGameRoomsResult> GetAllSpectableGameRooms([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> canSpec)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), canSpec);
			return ((ISingleResult<GetAllSpectableGameRoomsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomReplyById")]
		public ISingleResult<GetGameRoomReplyByIdResult> GetGameRoomReplyById([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<GetGameRoomReplyByIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByBuyInPolicy")]
		public ISingleResult<GetGameRoomsByBuyInPolicyResult> GetGameRoomsByBuyInPolicy([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> biPol)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), biPol);
			return ((ISingleResult<GetGameRoomsByBuyInPolicyResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByGameMode")]
		public ISingleResult<GetGameRoomsByGameModeResult> GetGameRoomsByGameMode([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> mode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mode);
			return ((ISingleResult<GetGameRoomsByGameModeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByMaxPlayers")]
		public ISingleResult<GetGameRoomsByMaxPlayersResult> GetGameRoomsByMaxPlayers([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> max)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), max);
			return ((ISingleResult<GetGameRoomsByMaxPlayersResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByMinBet")]
		public ISingleResult<GetGameRoomsByMinBetResult> GetGameRoomsByMinBet([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> min)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), min);
			return ((ISingleResult<GetGameRoomsByMinBetResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByMinPlayers")]
		public ISingleResult<GetGameRoomsByMinPlayersResult> GetGameRoomsByMinPlayers([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> min)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), min);
			return ((ISingleResult<GetGameRoomsByMinPlayersResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByPotSize")]
		public ISingleResult<GetGameRoomsByPotSizeResult> GetGameRoomsByPotSize([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> potSize)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), potSize);
			return ((ISingleResult<GetGameRoomsByPotSizeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomsByStaringChip")]
		public ISingleResult<GetGameRoomsByStaringChipResult> GetGameRoomsByStaringChip([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> scpol)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scpol);
			return ((ISingleResult<GetGameRoomsByStaringChipResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertGameRoomToDb")]
		public int InsertGameRoomToDb([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roomid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> gameid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string replay, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Xml")] System.Xml.Linq.XElement gameXML, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> isActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomid, gameid, replay, gameXML, isActive);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameModeValByName")]
		public ISingleResult<GetGameModeValByNameResult> GetGameModeValByName([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<GetGameModeValByNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllGameRooms")]
		public ISingleResult<GetAllGameRoomsResult> GetAllGameRooms()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAllGameRoomsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLeageValByName")]
		public ISingleResult<GetLeageValByNameResult> GetLeageValByName([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((ISingleResult<GetLeageValByNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateGameRoomPotSize")]
		public int UpdateGameRoomPotSize([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> newPotSize, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), newPotSize, id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteGameRoom")]
		public int DeleteGameRoom([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roomId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> gameid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomId, gameid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteGameRoomPref")]
		public int DeleteGameRoomPref([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roomId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateGameRoom")]
		public int UpdateGameRoom([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roomId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> gameid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Xml")] System.Xml.Linq.XElement newXML, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> newIsActive, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string newRep)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomId, gameid, newXML, newIsActive, newRep);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetGameRoomById")]
		public ISingleResult<GetGameRoomByIdResult> GetGameRoomById([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roomid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> gameid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roomid, gameid);
			return ((ISingleResult<GetGameRoomByIdResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _logId;
		
		private string _msg;
		
		private EntityRef<Log> _Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlogIdChanging(int value);
    partial void OnlogIdChanged();
    partial void OnmsgChanging(string value);
    partial void OnmsgChanged();
    #endregion
		
		public ErrorLog()
		{
			this._Log = default(EntityRef<Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int logId
		{
			get
			{
				return this._logId;
			}
			set
			{
				if ((this._logId != value))
				{
					if (this._Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogIdChanging(value);
					this.SendPropertyChanging();
					this._logId = value;
					this.SendPropertyChanged("logId");
					this.OnlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msg", DbType="VarChar(150)")]
		public string msg
		{
			get
			{
				return this._msg;
			}
			set
			{
				if ((this._msg != value))
				{
					this.OnmsgChanging(value);
					this.SendPropertyChanging();
					this._msg = value;
					this.SendPropertyChanged("msg");
					this.OnmsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_ErrorLog", Storage="_Log", ThisKey="logId", OtherKey="LogId", IsForeignKey=true)]
		public Log Log
		{
			get
			{
				return this._Log.Entity;
			}
			set
			{
				Log previousValue = this._Log.Entity;
				if (((previousValue != value) 
							|| (this._Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Log.Entity = null;
						previousValue.ErrorLog = null;
					}
					this._Log.Entity = value;
					if ((value != null))
					{
						value.ErrorLog = this;
						this._logId = value.LogId;
					}
					else
					{
						this._logId = default(int);
					}
					this.SendPropertyChanged("Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _username;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _avatar;
		
		private int _points;
		
		private int _money;
		
		private int _gamesPlayed;
		
		private int _leagueName;
		
		private int _winNum;
		
		private int _HighestCashGainInGame;
		
		private int _TotalProfit;
		
		private bool _inActive;
		
		private EntitySet<Player> _Players;
		
		private EntityRef<SpectetorGamesOfUser> _SpectetorGamesOfUser;
		
		private EntityRef<UserActiveGame> _UserActiveGame;
		
		private EntitySet<UserReplaySavedGame> _UserReplaySavedGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    partial void OnpointsChanging(int value);
    partial void OnpointsChanged();
    partial void OnmoneyChanging(int value);
    partial void OnmoneyChanged();
    partial void OngamesPlayedChanging(int value);
    partial void OngamesPlayedChanged();
    partial void OnleagueNameChanging(int value);
    partial void OnleagueNameChanged();
    partial void OnwinNumChanging(int value);
    partial void OnwinNumChanged();
    partial void OnHighestCashGainInGameChanging(int value);
    partial void OnHighestCashGainInGameChanged();
    partial void OnTotalProfitChanging(int value);
    partial void OnTotalProfitChanged();
    partial void OninActiveChanging(bool value);
    partial void OninActiveChanged();
    #endregion
		
		public UserTable()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._SpectetorGamesOfUser = default(EntityRef<SpectetorGamesOfUser>);
			this._UserActiveGame = default(EntityRef<UserActiveGame>);
			this._UserReplaySavedGames = new EntitySet<UserReplaySavedGame>(new Action<UserReplaySavedGame>(this.attach_UserReplaySavedGames), new Action<UserReplaySavedGame>(this.detach_UserReplaySavedGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_points", DbType="Int NOT NULL")]
		public int points
		{
			get
			{
				return this._points;
			}
			set
			{
				if ((this._points != value))
				{
					this.OnpointsChanging(value);
					this.SendPropertyChanging();
					this._points = value;
					this.SendPropertyChanged("points");
					this.OnpointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Int NOT NULL")]
		public int money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this.OnmoneyChanging(value);
					this.SendPropertyChanging();
					this._money = value;
					this.SendPropertyChanged("money");
					this.OnmoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gamesPlayed", DbType="Int NOT NULL")]
		public int gamesPlayed
		{
			get
			{
				return this._gamesPlayed;
			}
			set
			{
				if ((this._gamesPlayed != value))
				{
					this.OngamesPlayedChanging(value);
					this.SendPropertyChanging();
					this._gamesPlayed = value;
					this.SendPropertyChanged("gamesPlayed");
					this.OngamesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueName", DbType="Int NOT NULL")]
		public int leagueName
		{
			get
			{
				return this._leagueName;
			}
			set
			{
				if ((this._leagueName != value))
				{
					this.OnleagueNameChanging(value);
					this.SendPropertyChanging();
					this._leagueName = value;
					this.SendPropertyChanged("leagueName");
					this.OnleagueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winNum", DbType="Int NOT NULL")]
		public int winNum
		{
			get
			{
				return this._winNum;
			}
			set
			{
				if ((this._winNum != value))
				{
					this.OnwinNumChanging(value);
					this.SendPropertyChanging();
					this._winNum = value;
					this.SendPropertyChanged("winNum");
					this.OnwinNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighestCashGainInGame", DbType="Int NOT NULL")]
		public int HighestCashGainInGame
		{
			get
			{
				return this._HighestCashGainInGame;
			}
			set
			{
				if ((this._HighestCashGainInGame != value))
				{
					this.OnHighestCashGainInGameChanging(value);
					this.SendPropertyChanging();
					this._HighestCashGainInGame = value;
					this.SendPropertyChanged("HighestCashGainInGame");
					this.OnHighestCashGainInGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProfit", DbType="Int NOT NULL")]
		public int TotalProfit
		{
			get
			{
				return this._TotalProfit;
			}
			set
			{
				if ((this._TotalProfit != value))
				{
					this.OnTotalProfitChanging(value);
					this.SendPropertyChanging();
					this._TotalProfit = value;
					this.SendPropertyChanged("TotalProfit");
					this.OnTotalProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inActive", DbType="Bit NOT NULL")]
		public bool inActive
		{
			get
			{
				return this._inActive;
			}
			set
			{
				if ((this._inActive != value))
				{
					this.OninActiveChanging(value);
					this.SendPropertyChanging();
					this._inActive = value;
					this.SendPropertyChanged("inActive");
					this.OninActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Player", Storage="_Players", ThisKey="userId", OtherKey="user_Id")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_SpectetorGamesOfUser", Storage="_SpectetorGamesOfUser", ThisKey="userId", OtherKey="userId", IsUnique=true, IsForeignKey=false)]
		public SpectetorGamesOfUser SpectetorGamesOfUser
		{
			get
			{
				return this._SpectetorGamesOfUser.Entity;
			}
			set
			{
				SpectetorGamesOfUser previousValue = this._SpectetorGamesOfUser.Entity;
				if (((previousValue != value) 
							|| (this._SpectetorGamesOfUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpectetorGamesOfUser.Entity = null;
						previousValue.UserTable = null;
					}
					this._SpectetorGamesOfUser.Entity = value;
					if ((value != null))
					{
						value.UserTable = this;
					}
					this.SendPropertyChanged("SpectetorGamesOfUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_UserActiveGame", Storage="_UserActiveGame", ThisKey="userId", OtherKey="userId", IsUnique=true, IsForeignKey=false)]
		public UserActiveGame UserActiveGame
		{
			get
			{
				return this._UserActiveGame.Entity;
			}
			set
			{
				UserActiveGame previousValue = this._UserActiveGame.Entity;
				if (((previousValue != value) 
							|| (this._UserActiveGame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserActiveGame.Entity = null;
						previousValue.UserTable = null;
					}
					this._UserActiveGame.Entity = value;
					if ((value != null))
					{
						value.UserTable = this;
					}
					this.SendPropertyChanged("UserActiveGame");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_UserReplaySavedGame", Storage="_UserReplaySavedGames", ThisKey="userId", OtherKey="userId")]
		public EntitySet<UserReplaySavedGame> UserReplaySavedGames
		{
			get
			{
				return this._UserReplaySavedGames;
			}
			set
			{
				this._UserReplaySavedGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
		
		private void attach_UserReplaySavedGames(UserReplaySavedGame entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_UserReplaySavedGames(UserReplaySavedGame entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameMode")]
	public partial class GameMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Game_mode_value;
		
		private string _game_mode_name;
		
		private EntitySet<GameRoomPreferance> _GameRoomPreferances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGame_mode_valueChanging(int value);
    partial void OnGame_mode_valueChanged();
    partial void Ongame_mode_nameChanging(string value);
    partial void Ongame_mode_nameChanged();
    #endregion
		
		public GameMode()
		{
			this._GameRoomPreferances = new EntitySet<GameRoomPreferance>(new Action<GameRoomPreferance>(this.attach_GameRoomPreferances), new Action<GameRoomPreferance>(this.detach_GameRoomPreferances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Game mode value]", Storage="_Game_mode_value", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Game_mode_value
		{
			get
			{
				return this._Game_mode_value;
			}
			set
			{
				if ((this._Game_mode_value != value))
				{
					this.OnGame_mode_valueChanging(value);
					this.SendPropertyChanging();
					this._Game_mode_value = value;
					this.SendPropertyChanged("Game_mode_value");
					this.OnGame_mode_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[game mode name]", Storage="_game_mode_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string game_mode_name
		{
			get
			{
				return this._game_mode_name;
			}
			set
			{
				if ((this._game_mode_name != value))
				{
					this.Ongame_mode_nameChanging(value);
					this.SendPropertyChanging();
					this._game_mode_name = value;
					this.SendPropertyChanged("game_mode_name");
					this.Ongame_mode_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameMode_GameRoomPreferance", Storage="_GameRoomPreferances", ThisKey="Game_mode_value", OtherKey="GameMode")]
		public EntitySet<GameRoomPreferance> GameRoomPreferances
		{
			get
			{
				return this._GameRoomPreferances;
			}
			set
			{
				this._GameRoomPreferances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameRoomPreferances(GameRoomPreferance entity)
		{
			this.SendPropertyChanging();
			entity.GameMode1 = this;
		}
		
		private void detach_GameRoomPreferances(GameRoomPreferance entity)
		{
			this.SendPropertyChanging();
			entity.GameMode1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameRoom")]
	public partial class GameRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomId;
		
		private int _GameId;
		
		private string _Replay;
		
		private System.Xml.Linq.XElement _GameXML;
		
		private bool _isActive;
		
		private EntitySet<GameRoomPreferance> _GameRoomPreferances;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<SpectetorGamesOfUser> _SpectetorGamesOfUsers;
		
		private EntitySet<SystemLog> _SystemLogs;
		
		private EntitySet<UserActiveGame> _UserActiveGames;
		
		private EntityRef<UserReplaySavedGame> _UserReplaySavedGame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnReplayChanging(string value);
    partial void OnReplayChanged();
    partial void OnGameXMLChanging(System.Xml.Linq.XElement value);
    partial void OnGameXMLChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public GameRoom()
		{
			this._GameRoomPreferances = new EntitySet<GameRoomPreferance>(new Action<GameRoomPreferance>(this.attach_GameRoomPreferances), new Action<GameRoomPreferance>(this.detach_GameRoomPreferances));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._SpectetorGamesOfUsers = new EntitySet<SpectetorGamesOfUser>(new Action<SpectetorGamesOfUser>(this.attach_SpectetorGamesOfUsers), new Action<SpectetorGamesOfUser>(this.detach_SpectetorGamesOfUsers));
			this._SystemLogs = new EntitySet<SystemLog>(new Action<SystemLog>(this.attach_SystemLogs), new Action<SystemLog>(this.detach_SystemLogs));
			this._UserActiveGames = new EntitySet<UserActiveGame>(new Action<UserActiveGame>(this.attach_UserActiveGames), new Action<UserActiveGame>(this.detach_UserActiveGames));
			this._UserReplaySavedGame = default(EntityRef<UserReplaySavedGame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replay", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Replay
		{
			get
			{
				return this._Replay;
			}
			set
			{
				if ((this._Replay != value))
				{
					this.OnReplayChanging(value);
					this.SendPropertyChanging();
					this._Replay = value;
					this.SendPropertyChanged("Replay");
					this.OnReplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this.OnGameXMLChanging(value);
					this.SendPropertyChanging();
					this._GameXML = value;
					this.SendPropertyChanged("GameXML");
					this.OnGameXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_GameRoomPreferance", Storage="_GameRoomPreferances", ThisKey="RoomId,GameId", OtherKey="Roomid,GameId")]
		public EntitySet<GameRoomPreferance> GameRoomPreferances
		{
			get
			{
				return this._GameRoomPreferances;
			}
			set
			{
				this._GameRoomPreferances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_Player", Storage="_Players", ThisKey="RoomId,GameId", OtherKey="room_Id,Game_Id")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_SpectetorGamesOfUser", Storage="_SpectetorGamesOfUsers", ThisKey="RoomId,GameId", OtherKey="roomId,Game_Id")]
		public EntitySet<SpectetorGamesOfUser> SpectetorGamesOfUsers
		{
			get
			{
				return this._SpectetorGamesOfUsers;
			}
			set
			{
				this._SpectetorGamesOfUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_SystemLog", Storage="_SystemLogs", ThisKey="RoomId,GameId", OtherKey="roomId,game_Id")]
		public EntitySet<SystemLog> SystemLogs
		{
			get
			{
				return this._SystemLogs;
			}
			set
			{
				this._SystemLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_UserActiveGame", Storage="_UserActiveGames", ThisKey="RoomId,GameId", OtherKey="roomId,Game_Id")]
		public EntitySet<UserActiveGame> UserActiveGames
		{
			get
			{
				return this._UserActiveGames;
			}
			set
			{
				this._UserActiveGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_UserReplaySavedGame", Storage="_UserReplaySavedGame", ThisKey="RoomId,GameId", OtherKey="roomId,gameId", IsUnique=true, IsForeignKey=false)]
		public UserReplaySavedGame UserReplaySavedGame
		{
			get
			{
				return this._UserReplaySavedGame.Entity;
			}
			set
			{
				UserReplaySavedGame previousValue = this._UserReplaySavedGame.Entity;
				if (((previousValue != value) 
							|| (this._UserReplaySavedGame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserReplaySavedGame.Entity = null;
						previousValue.GameRoom = null;
					}
					this._UserReplaySavedGame.Entity = value;
					if ((value != null))
					{
						value.GameRoom = this;
					}
					this.SendPropertyChanged("UserReplaySavedGame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameRoomPreferances(GameRoomPreferance entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = this;
		}
		
		private void detach_GameRoomPreferances(GameRoomPreferance entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = null;
		}
		
		private void attach_SpectetorGamesOfUsers(SpectetorGamesOfUser entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = this;
		}
		
		private void detach_SpectetorGamesOfUsers(SpectetorGamesOfUser entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = null;
		}
		
		private void attach_SystemLogs(SystemLog entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = this;
		}
		
		private void detach_SystemLogs(SystemLog entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = null;
		}
		
		private void attach_UserActiveGames(UserActiveGame entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = this;
		}
		
		private void detach_UserActiveGames(UserActiveGame entity)
		{
			this.SendPropertyChanging();
			entity.GameRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameRoomPreferance")]
	public partial class GameRoomPreferance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Roomid;
		
		private System.Nullable<bool> _CanSpectate;
		
		private System.Nullable<int> _MinPlayers;
		
		private System.Nullable<int> _MaxPlayers;
		
		private System.Nullable<int> _BuyInPolicy;
		
		private System.Nullable<int> _EnterGamePolicy;
		
		private System.Nullable<int> _MinBet;
		
		private System.Nullable<int> _League;
		
		private System.Nullable<int> _GameMode;
		
		private int _GameId;
		
		private System.Nullable<int> _PotSize;
		
		private EntityRef<GameMode> _GameMode1;
		
		private EntityRef<GameRoom> _GameRoom;
		
		private EntityRef<LeagueName> _LeagueName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomidChanging(int value);
    partial void OnRoomidChanged();
    partial void OnCanSpectateChanging(System.Nullable<bool> value);
    partial void OnCanSpectateChanged();
    partial void OnMinPlayersChanging(System.Nullable<int> value);
    partial void OnMinPlayersChanged();
    partial void OnMaxPlayersChanging(System.Nullable<int> value);
    partial void OnMaxPlayersChanged();
    partial void OnBuyInPolicyChanging(System.Nullable<int> value);
    partial void OnBuyInPolicyChanged();
    partial void OnEnterGamePolicyChanging(System.Nullable<int> value);
    partial void OnEnterGamePolicyChanged();
    partial void OnMinBetChanging(System.Nullable<int> value);
    partial void OnMinBetChanged();
    partial void OnLeagueChanging(System.Nullable<int> value);
    partial void OnLeagueChanged();
    partial void OnGameModeChanging(System.Nullable<int> value);
    partial void OnGameModeChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnPotSizeChanging(System.Nullable<int> value);
    partial void OnPotSizeChanged();
    #endregion
		
		public GameRoomPreferance()
		{
			this._GameMode1 = default(EntityRef<GameMode>);
			this._GameRoom = default(EntityRef<GameRoom>);
			this._LeagueName = default(EntityRef<LeagueName>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Roomid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Roomid
		{
			get
			{
				return this._Roomid;
			}
			set
			{
				if ((this._Roomid != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomidChanging(value);
					this.SendPropertyChanging();
					this._Roomid = value;
					this.SendPropertyChanged("Roomid");
					this.OnRoomidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanSpectate", DbType="Bit")]
		public System.Nullable<bool> CanSpectate
		{
			get
			{
				return this._CanSpectate;
			}
			set
			{
				if ((this._CanSpectate != value))
				{
					this.OnCanSpectateChanging(value);
					this.SendPropertyChanging();
					this._CanSpectate = value;
					this.SendPropertyChanged("CanSpectate");
					this.OnCanSpectateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPlayers", DbType="Int")]
		public System.Nullable<int> MinPlayers
		{
			get
			{
				return this._MinPlayers;
			}
			set
			{
				if ((this._MinPlayers != value))
				{
					this.OnMinPlayersChanging(value);
					this.SendPropertyChanging();
					this._MinPlayers = value;
					this.SendPropertyChanged("MinPlayers");
					this.OnMinPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlayers", DbType="Int")]
		public System.Nullable<int> MaxPlayers
		{
			get
			{
				return this._MaxPlayers;
			}
			set
			{
				if ((this._MaxPlayers != value))
				{
					this.OnMaxPlayersChanging(value);
					this.SendPropertyChanging();
					this._MaxPlayers = value;
					this.SendPropertyChanged("MaxPlayers");
					this.OnMaxPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyInPolicy", DbType="Int")]
		public System.Nullable<int> BuyInPolicy
		{
			get
			{
				return this._BuyInPolicy;
			}
			set
			{
				if ((this._BuyInPolicy != value))
				{
					this.OnBuyInPolicyChanging(value);
					this.SendPropertyChanging();
					this._BuyInPolicy = value;
					this.SendPropertyChanged("BuyInPolicy");
					this.OnBuyInPolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterGamePolicy", DbType="Int")]
		public System.Nullable<int> EnterGamePolicy
		{
			get
			{
				return this._EnterGamePolicy;
			}
			set
			{
				if ((this._EnterGamePolicy != value))
				{
					this.OnEnterGamePolicyChanging(value);
					this.SendPropertyChanging();
					this._EnterGamePolicy = value;
					this.SendPropertyChanged("EnterGamePolicy");
					this.OnEnterGamePolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinBet", DbType="Int")]
		public System.Nullable<int> MinBet
		{
			get
			{
				return this._MinBet;
			}
			set
			{
				if ((this._MinBet != value))
				{
					this.OnMinBetChanging(value);
					this.SendPropertyChanging();
					this._MinBet = value;
					this.SendPropertyChanged("MinBet");
					this.OnMinBetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_League", DbType="Int")]
		public System.Nullable<int> League
		{
			get
			{
				return this._League;
			}
			set
			{
				if ((this._League != value))
				{
					if (this._LeagueName.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueChanging(value);
					this.SendPropertyChanging();
					this._League = value;
					this.SendPropertyChanged("League");
					this.OnLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameMode", DbType="Int")]
		public System.Nullable<int> GameMode
		{
			get
			{
				return this._GameMode;
			}
			set
			{
				if ((this._GameMode != value))
				{
					if (this._GameMode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameModeChanging(value);
					this.SendPropertyChanging();
					this._GameMode = value;
					this.SendPropertyChanged("GameMode");
					this.OnGameModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PotSize", DbType="Int")]
		public System.Nullable<int> PotSize
		{
			get
			{
				return this._PotSize;
			}
			set
			{
				if ((this._PotSize != value))
				{
					this.OnPotSizeChanging(value);
					this.SendPropertyChanging();
					this._PotSize = value;
					this.SendPropertyChanged("PotSize");
					this.OnPotSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameMode_GameRoomPreferance", Storage="_GameMode1", ThisKey="GameMode", OtherKey="Game_mode_value", IsForeignKey=true)]
		public GameMode GameMode1
		{
			get
			{
				return this._GameMode1.Entity;
			}
			set
			{
				GameMode previousValue = this._GameMode1.Entity;
				if (((previousValue != value) 
							|| (this._GameMode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameMode1.Entity = null;
						previousValue.GameRoomPreferances.Remove(this);
					}
					this._GameMode1.Entity = value;
					if ((value != null))
					{
						value.GameRoomPreferances.Add(this);
						this._GameMode = value.Game_mode_value;
					}
					else
					{
						this._GameMode = default(Nullable<int>);
					}
					this.SendPropertyChanged("GameMode1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_GameRoomPreferance", Storage="_GameRoom", ThisKey="Roomid,GameId", OtherKey="RoomId,GameId", IsForeignKey=true)]
		public GameRoom GameRoom
		{
			get
			{
				return this._GameRoom.Entity;
			}
			set
			{
				GameRoom previousValue = this._GameRoom.Entity;
				if (((previousValue != value) 
							|| (this._GameRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameRoom.Entity = null;
						previousValue.GameRoomPreferances.Remove(this);
					}
					this._GameRoom.Entity = value;
					if ((value != null))
					{
						value.GameRoomPreferances.Add(this);
						this._Roomid = value.RoomId;
						this._GameId = value.GameId;
					}
					else
					{
						this._Roomid = default(int);
						this._GameId = default(int);
					}
					this.SendPropertyChanged("GameRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueName_GameRoomPreferance", Storage="_LeagueName", ThisKey="League", OtherKey="League_Value", IsForeignKey=true)]
		public LeagueName LeagueName
		{
			get
			{
				return this._LeagueName.Entity;
			}
			set
			{
				LeagueName previousValue = this._LeagueName.Entity;
				if (((previousValue != value) 
							|| (this._LeagueName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueName.Entity = null;
						previousValue.GameRoomPreferances.Remove(this);
					}
					this._LeagueName.Entity = value;
					if ((value != null))
					{
						value.GameRoomPreferances.Add(this);
						this._League = value.League_Value;
					}
					else
					{
						this._League = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueName");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueName")]
	public partial class LeagueName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _League_Value;
		
		private string _League_Name;
		
		private EntitySet<GameRoomPreferance> _GameRoomPreferances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeague_ValueChanging(int value);
    partial void OnLeague_ValueChanged();
    partial void OnLeague_NameChanging(string value);
    partial void OnLeague_NameChanged();
    #endregion
		
		public LeagueName()
		{
			this._GameRoomPreferances = new EntitySet<GameRoomPreferance>(new Action<GameRoomPreferance>(this.attach_GameRoomPreferances), new Action<GameRoomPreferance>(this.detach_GameRoomPreferances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[League Value]", Storage="_League_Value", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int League_Value
		{
			get
			{
				return this._League_Value;
			}
			set
			{
				if ((this._League_Value != value))
				{
					this.OnLeague_ValueChanging(value);
					this.SendPropertyChanging();
					this._League_Value = value;
					this.SendPropertyChanged("League_Value");
					this.OnLeague_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[League Name]", Storage="_League_Name", DbType="VarChar(10)")]
		public string League_Name
		{
			get
			{
				return this._League_Name;
			}
			set
			{
				if ((this._League_Name != value))
				{
					this.OnLeague_NameChanging(value);
					this.SendPropertyChanging();
					this._League_Name = value;
					this.SendPropertyChanged("League_Name");
					this.OnLeague_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueName_GameRoomPreferance", Storage="_GameRoomPreferances", ThisKey="League_Value", OtherKey="League")]
		public EntitySet<GameRoomPreferance> GameRoomPreferances
		{
			get
			{
				return this._GameRoomPreferances;
			}
			set
			{
				this._GameRoomPreferances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameRoomPreferances(GameRoomPreferance entity)
		{
			this.SendPropertyChanging();
			entity.LeagueName = this;
		}
		
		private void detach_GameRoomPreferances(GameRoomPreferance entity)
		{
			this.SendPropertyChanging();
			entity.LeagueName = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private int _LogPriority;
		
		private EntityRef<ErrorLog> _ErrorLog;
		
		private EntityRef<SystemLog> _SystemLog;
		
		private EntityRef<PriorityLogEnum> _PriorityLogEnum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnLogPriorityChanging(int value);
    partial void OnLogPriorityChanged();
    #endregion
		
		public Log()
		{
			this._ErrorLog = default(EntityRef<ErrorLog>);
			this._SystemLog = default(EntityRef<SystemLog>);
			this._PriorityLogEnum = default(EntityRef<PriorityLogEnum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogPriority", DbType="Int NOT NULL")]
		public int LogPriority
		{
			get
			{
				return this._LogPriority;
			}
			set
			{
				if ((this._LogPriority != value))
				{
					if (this._PriorityLogEnum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogPriorityChanging(value);
					this.SendPropertyChanging();
					this._LogPriority = value;
					this.SendPropertyChanged("LogPriority");
					this.OnLogPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_ErrorLog", Storage="_ErrorLog", ThisKey="LogId", OtherKey="logId", IsUnique=true, IsForeignKey=false)]
		public ErrorLog ErrorLog
		{
			get
			{
				return this._ErrorLog.Entity;
			}
			set
			{
				ErrorLog previousValue = this._ErrorLog.Entity;
				if (((previousValue != value) 
							|| (this._ErrorLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ErrorLog.Entity = null;
						previousValue.Log = null;
					}
					this._ErrorLog.Entity = value;
					if ((value != null))
					{
						value.Log = this;
					}
					this.SendPropertyChanged("ErrorLog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_SystemLog", Storage="_SystemLog", ThisKey="LogId", OtherKey="logId", IsUnique=true, IsForeignKey=false)]
		public SystemLog SystemLog
		{
			get
			{
				return this._SystemLog.Entity;
			}
			set
			{
				SystemLog previousValue = this._SystemLog.Entity;
				if (((previousValue != value) 
							|| (this._SystemLog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemLog.Entity = null;
						previousValue.Log = null;
					}
					this._SystemLog.Entity = value;
					if ((value != null))
					{
						value.Log = this;
					}
					this.SendPropertyChanged("SystemLog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriorityLogEnum_Log", Storage="_PriorityLogEnum", ThisKey="LogPriority", OtherKey="PriorityValue", IsForeignKey=true)]
		public PriorityLogEnum PriorityLogEnum
		{
			get
			{
				return this._PriorityLogEnum.Entity;
			}
			set
			{
				PriorityLogEnum previousValue = this._PriorityLogEnum.Entity;
				if (((previousValue != value) 
							|| (this._PriorityLogEnum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PriorityLogEnum.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._PriorityLogEnum.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._LogPriority = value.PriorityValue;
					}
					else
					{
						this._LogPriority = default(int);
					}
					this.SendPropertyChanged("PriorityLogEnum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _room_Id;
		
		private int _user_Id;
		
		private bool _is_player_active;
		
		private string _player_name;
		
		private int _Total_chip;
		
		private int _Round_chip_bet;
		
		private bool _Player_action_the_round;
		
		private int _first_card;
		
		private int _secund_card;
		
		private int _Game_Id;
		
		private EntityRef<GameRoom> _GameRoom;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onroom_IdChanging(int value);
    partial void Onroom_IdChanged();
    partial void Onuser_IdChanging(int value);
    partial void Onuser_IdChanged();
    partial void Onis_player_activeChanging(bool value);
    partial void Onis_player_activeChanged();
    partial void Onplayer_nameChanging(string value);
    partial void Onplayer_nameChanged();
    partial void OnTotal_chipChanging(int value);
    partial void OnTotal_chipChanged();
    partial void OnRound_chip_betChanging(int value);
    partial void OnRound_chip_betChanged();
    partial void OnPlayer_action_the_roundChanging(bool value);
    partial void OnPlayer_action_the_roundChanged();
    partial void Onfirst_cardChanging(int value);
    partial void Onfirst_cardChanged();
    partial void Onsecund_cardChanging(int value);
    partial void Onsecund_cardChanged();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    #endregion
		
		public Player()
		{
			this._GameRoom = default(EntityRef<GameRoom>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[room Id]", Storage="_room_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int room_Id
		{
			get
			{
				return this._room_Id;
			}
			set
			{
				if ((this._room_Id != value))
				{
					this.Onroom_IdChanging(value);
					this.SendPropertyChanging();
					this._room_Id = value;
					this.SendPropertyChanged("room_Id");
					this.Onroom_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user Id]", Storage="_user_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_Id
		{
			get
			{
				return this._user_Id;
			}
			set
			{
				if ((this._user_Id != value))
				{
					this.Onuser_IdChanging(value);
					this.SendPropertyChanging();
					this._user_Id = value;
					this.SendPropertyChanged("user_Id");
					this.Onuser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[is player active]", Storage="_is_player_active", DbType="Bit NOT NULL")]
		public bool is_player_active
		{
			get
			{
				return this._is_player_active;
			}
			set
			{
				if ((this._is_player_active != value))
				{
					this.Onis_player_activeChanging(value);
					this.SendPropertyChanging();
					this._is_player_active = value;
					this.SendPropertyChanged("is_player_active");
					this.Onis_player_activeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[player name]", Storage="_player_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string player_name
		{
			get
			{
				return this._player_name;
			}
			set
			{
				if ((this._player_name != value))
				{
					this.Onplayer_nameChanging(value);
					this.SendPropertyChanging();
					this._player_name = value;
					this.SendPropertyChanged("player_name");
					this.Onplayer_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total chip]", Storage="_Total_chip", DbType="Int NOT NULL")]
		public int Total_chip
		{
			get
			{
				return this._Total_chip;
			}
			set
			{
				if ((this._Total_chip != value))
				{
					this.OnTotal_chipChanging(value);
					this.SendPropertyChanging();
					this._Total_chip = value;
					this.SendPropertyChanged("Total_chip");
					this.OnTotal_chipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Round chip bet]", Storage="_Round_chip_bet", DbType="Int NOT NULL")]
		public int Round_chip_bet
		{
			get
			{
				return this._Round_chip_bet;
			}
			set
			{
				if ((this._Round_chip_bet != value))
				{
					this.OnRound_chip_betChanging(value);
					this.SendPropertyChanging();
					this._Round_chip_bet = value;
					this.SendPropertyChanged("Round_chip_bet");
					this.OnRound_chip_betChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Player action the round]", Storage="_Player_action_the_round", DbType="Bit NOT NULL")]
		public bool Player_action_the_round
		{
			get
			{
				return this._Player_action_the_round;
			}
			set
			{
				if ((this._Player_action_the_round != value))
				{
					this.OnPlayer_action_the_roundChanging(value);
					this.SendPropertyChanging();
					this._Player_action_the_round = value;
					this.SendPropertyChanged("Player_action_the_round");
					this.OnPlayer_action_the_roundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[first card]", Storage="_first_card", DbType="Int NOT NULL")]
		public int first_card
		{
			get
			{
				return this._first_card;
			}
			set
			{
				if ((this._first_card != value))
				{
					this.Onfirst_cardChanging(value);
					this.SendPropertyChanging();
					this._first_card = value;
					this.SendPropertyChanged("first_card");
					this.Onfirst_cardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[secund card]", Storage="_secund_card", DbType="Int NOT NULL")]
		public int secund_card
		{
			get
			{
				return this._secund_card;
			}
			set
			{
				if ((this._secund_card != value))
				{
					this.Onsecund_cardChanging(value);
					this.SendPropertyChanging();
					this._secund_card = value;
					this.SendPropertyChanged("secund_card");
					this.Onsecund_cardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Game Id]", Storage="_Game_Id", DbType="Int NOT NULL")]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_Player", Storage="_GameRoom", ThisKey="room_Id,Game_Id", OtherKey="RoomId,GameId", IsForeignKey=true)]
		public GameRoom GameRoom
		{
			get
			{
				return this._GameRoom.Entity;
			}
			set
			{
				GameRoom previousValue = this._GameRoom.Entity;
				if (((previousValue != value) 
							|| (this._GameRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameRoom.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._GameRoom.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._room_Id = value.RoomId;
						this._Game_Id = value.GameId;
					}
					else
					{
						this._room_Id = default(int);
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("GameRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Player", Storage="_UserTable", ThisKey="user_Id", OtherKey="userId", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._user_Id = value.userId;
					}
					else
					{
						this._user_Id = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PriorityLogEnum")]
	public partial class PriorityLogEnum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriorityValue;
		
		private string _ProprityName;
		
		private EntitySet<Log> _Logs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriorityValueChanging(int value);
    partial void OnPriorityValueChanged();
    partial void OnProprityNameChanging(string value);
    partial void OnProprityNameChanged();
    #endregion
		
		public PriorityLogEnum()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityValue", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PriorityValue
		{
			get
			{
				return this._PriorityValue;
			}
			set
			{
				if ((this._PriorityValue != value))
				{
					this.OnPriorityValueChanging(value);
					this.SendPropertyChanging();
					this._PriorityValue = value;
					this.SendPropertyChanged("PriorityValue");
					this.OnPriorityValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProprityName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ProprityName
		{
			get
			{
				return this._ProprityName;
			}
			set
			{
				if ((this._ProprityName != value))
				{
					this.OnProprityNameChanging(value);
					this.SendPropertyChanging();
					this._ProprityName = value;
					this.SendPropertyChanged("ProprityName");
					this.OnProprityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PriorityLogEnum_Log", Storage="_Logs", ThisKey="PriorityValue", OtherKey="LogPriority")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.PriorityLogEnum = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.PriorityLogEnum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpectetorGamesOfUser")]
	public partial class SpectetorGamesOfUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _roomId;
		
		private int _Game_Id;
		
		private EntityRef<GameRoom> _GameRoom;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    #endregion
		
		public SpectetorGamesOfUser()
		{
			this._GameRoom = default(EntityRef<GameRoom>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Game Id]", Storage="_Game_Id", DbType="Int NOT NULL")]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_SpectetorGamesOfUser", Storage="_GameRoom", ThisKey="roomId,Game_Id", OtherKey="RoomId,GameId", IsForeignKey=true)]
		public GameRoom GameRoom
		{
			get
			{
				return this._GameRoom.Entity;
			}
			set
			{
				GameRoom previousValue = this._GameRoom.Entity;
				if (((previousValue != value) 
							|| (this._GameRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameRoom.Entity = null;
						previousValue.SpectetorGamesOfUsers.Remove(this);
					}
					this._GameRoom.Entity = value;
					if ((value != null))
					{
						value.SpectetorGamesOfUsers.Add(this);
						this._roomId = value.RoomId;
						this._Game_Id = value.GameId;
					}
					else
					{
						this._roomId = default(int);
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("GameRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_SpectetorGamesOfUser", Storage="_UserTable", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.SpectetorGamesOfUser = null;
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.SpectetorGamesOfUser = this;
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemLog")]
	public partial class SystemLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _logId;
		
		private string _msg;
		
		private int _roomId;
		
		private int _game_Id;
		
		private EntityRef<GameRoom> _GameRoom;
		
		private EntityRef<Log> _Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlogIdChanging(int value);
    partial void OnlogIdChanged();
    partial void OnmsgChanging(string value);
    partial void OnmsgChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void Ongame_IdChanging(int value);
    partial void Ongame_IdChanged();
    #endregion
		
		public SystemLog()
		{
			this._GameRoom = default(EntityRef<GameRoom>);
			this._Log = default(EntityRef<Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int logId
		{
			get
			{
				return this._logId;
			}
			set
			{
				if ((this._logId != value))
				{
					if (this._Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogIdChanging(value);
					this.SendPropertyChanging();
					this._logId = value;
					this.SendPropertyChanged("logId");
					this.OnlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msg", DbType="VarChar(150)")]
		public string msg
		{
			get
			{
				return this._msg;
			}
			set
			{
				if ((this._msg != value))
				{
					this.OnmsgChanging(value);
					this.SendPropertyChanging();
					this._msg = value;
					this.SendPropertyChanged("msg");
					this.OnmsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[game Id]", Storage="_game_Id", DbType="Int NOT NULL")]
		public int game_Id
		{
			get
			{
				return this._game_Id;
			}
			set
			{
				if ((this._game_Id != value))
				{
					this.Ongame_IdChanging(value);
					this.SendPropertyChanging();
					this._game_Id = value;
					this.SendPropertyChanged("game_Id");
					this.Ongame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_SystemLog", Storage="_GameRoom", ThisKey="roomId,game_Id", OtherKey="RoomId,GameId", IsForeignKey=true)]
		public GameRoom GameRoom
		{
			get
			{
				return this._GameRoom.Entity;
			}
			set
			{
				GameRoom previousValue = this._GameRoom.Entity;
				if (((previousValue != value) 
							|| (this._GameRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameRoom.Entity = null;
						previousValue.SystemLogs.Remove(this);
					}
					this._GameRoom.Entity = value;
					if ((value != null))
					{
						value.SystemLogs.Add(this);
						this._roomId = value.RoomId;
						this._game_Id = value.GameId;
					}
					else
					{
						this._roomId = default(int);
						this._game_Id = default(int);
					}
					this.SendPropertyChanged("GameRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_SystemLog", Storage="_Log", ThisKey="logId", OtherKey="LogId", IsForeignKey=true)]
		public Log Log
		{
			get
			{
				return this._Log.Entity;
			}
			set
			{
				Log previousValue = this._Log.Entity;
				if (((previousValue != value) 
							|| (this._Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Log.Entity = null;
						previousValue.SystemLog = null;
					}
					this._Log.Entity = value;
					if ((value != null))
					{
						value.SystemLog = this;
						this._logId = value.LogId;
					}
					else
					{
						this._logId = default(int);
					}
					this.SendPropertyChanged("Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserActiveGames")]
	public partial class UserActiveGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _roomId;
		
		private int _Game_Id;
		
		private EntityRef<GameRoom> _GameRoom;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    #endregion
		
		public UserActiveGame()
		{
			this._GameRoom = default(EntityRef<GameRoom>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL")]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Game Id]", Storage="_Game_Id", DbType="Int NOT NULL")]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_UserActiveGame", Storage="_GameRoom", ThisKey="roomId,Game_Id", OtherKey="RoomId,GameId", IsForeignKey=true)]
		public GameRoom GameRoom
		{
			get
			{
				return this._GameRoom.Entity;
			}
			set
			{
				GameRoom previousValue = this._GameRoom.Entity;
				if (((previousValue != value) 
							|| (this._GameRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameRoom.Entity = null;
						previousValue.UserActiveGames.Remove(this);
					}
					this._GameRoom.Entity = value;
					if ((value != null))
					{
						value.UserActiveGames.Add(this);
						this._roomId = value.RoomId;
						this._Game_Id = value.GameId;
					}
					else
					{
						this._roomId = default(int);
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("GameRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_UserActiveGame", Storage="_UserTable", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.UserActiveGame = null;
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.UserActiveGame = this;
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserReplaySavedGames")]
	public partial class UserReplaySavedGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _roomId;
		
		private int _gameId;
		
		private EntityRef<GameRoom> _GameRoom;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OngameIdChanging(int value);
    partial void OngameIdChanged();
    #endregion
		
		public UserReplaySavedGame()
		{
			this._GameRoom = default(EntityRef<GameRoom>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int gameId
		{
			get
			{
				return this._gameId;
			}
			set
			{
				if ((this._gameId != value))
				{
					if (this._GameRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngameIdChanging(value);
					this.SendPropertyChanging();
					this._gameId = value;
					this.SendPropertyChanged("gameId");
					this.OngameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameRoom_UserReplaySavedGame", Storage="_GameRoom", ThisKey="roomId,gameId", OtherKey="RoomId,GameId", IsForeignKey=true)]
		public GameRoom GameRoom
		{
			get
			{
				return this._GameRoom.Entity;
			}
			set
			{
				GameRoom previousValue = this._GameRoom.Entity;
				if (((previousValue != value) 
							|| (this._GameRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameRoom.Entity = null;
						previousValue.UserReplaySavedGame = null;
					}
					this._GameRoom.Entity = value;
					if ((value != null))
					{
						value.UserReplaySavedGame = this;
						this._roomId = value.RoomId;
						this._gameId = value.GameId;
					}
					else
					{
						this._roomId = default(int);
						this._gameId = default(int);
					}
					this.SendPropertyChanged("GameRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_UserReplaySavedGame", Storage="_UserTable", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.UserReplaySavedGames.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.UserReplaySavedGames.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetAllUserResult
	{
		
		private int _userId;
		
		private string _username;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _avatar;
		
		private int _points;
		
		private int _money;
		
		private int _gamesPlayed;
		
		private int _leagueName;
		
		private int _winNum;
		
		private int _HighestCashGainInGame;
		
		private int _TotalProfit;
		
		private bool _inActive;
		
		public GetAllUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this._userId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this._avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_points", DbType="Int NOT NULL")]
		public int points
		{
			get
			{
				return this._points;
			}
			set
			{
				if ((this._points != value))
				{
					this._points = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Int NOT NULL")]
		public int money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this._money = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gamesPlayed", DbType="Int NOT NULL")]
		public int gamesPlayed
		{
			get
			{
				return this._gamesPlayed;
			}
			set
			{
				if ((this._gamesPlayed != value))
				{
					this._gamesPlayed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueName", DbType="Int NOT NULL")]
		public int leagueName
		{
			get
			{
				return this._leagueName;
			}
			set
			{
				if ((this._leagueName != value))
				{
					this._leagueName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winNum", DbType="Int NOT NULL")]
		public int winNum
		{
			get
			{
				return this._winNum;
			}
			set
			{
				if ((this._winNum != value))
				{
					this._winNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighestCashGainInGame", DbType="Int NOT NULL")]
		public int HighestCashGainInGame
		{
			get
			{
				return this._HighestCashGainInGame;
			}
			set
			{
				if ((this._HighestCashGainInGame != value))
				{
					this._HighestCashGainInGame = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProfit", DbType="Int NOT NULL")]
		public int TotalProfit
		{
			get
			{
				return this._TotalProfit;
			}
			set
			{
				if ((this._TotalProfit != value))
				{
					this._TotalProfit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inActive", DbType="Bit NOT NULL")]
		public bool inActive
		{
			get
			{
				return this._inActive;
			}
			set
			{
				if ((this._inActive != value))
				{
					this._inActive = value;
				}
			}
		}
	}
	
	public partial class GetUserByUserIdResult
	{
		
		private int _userId;
		
		private string _username;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _avatar;
		
		private int _points;
		
		private int _money;
		
		private int _gamesPlayed;
		
		private int _leagueName;
		
		private int _winNum;
		
		private int _HighestCashGainInGame;
		
		private int _TotalProfit;
		
		private bool _inActive;
		
		public GetUserByUserIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this._userId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this._avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_points", DbType="Int NOT NULL")]
		public int points
		{
			get
			{
				return this._points;
			}
			set
			{
				if ((this._points != value))
				{
					this._points = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Int NOT NULL")]
		public int money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this._money = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gamesPlayed", DbType="Int NOT NULL")]
		public int gamesPlayed
		{
			get
			{
				return this._gamesPlayed;
			}
			set
			{
				if ((this._gamesPlayed != value))
				{
					this._gamesPlayed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueName", DbType="Int NOT NULL")]
		public int leagueName
		{
			get
			{
				return this._leagueName;
			}
			set
			{
				if ((this._leagueName != value))
				{
					this._leagueName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winNum", DbType="Int NOT NULL")]
		public int winNum
		{
			get
			{
				return this._winNum;
			}
			set
			{
				if ((this._winNum != value))
				{
					this._winNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighestCashGainInGame", DbType="Int NOT NULL")]
		public int HighestCashGainInGame
		{
			get
			{
				return this._HighestCashGainInGame;
			}
			set
			{
				if ((this._HighestCashGainInGame != value))
				{
					this._HighestCashGainInGame = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProfit", DbType="Int NOT NULL")]
		public int TotalProfit
		{
			get
			{
				return this._TotalProfit;
			}
			set
			{
				if ((this._TotalProfit != value))
				{
					this._TotalProfit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inActive", DbType="Bit NOT NULL")]
		public bool inActive
		{
			get
			{
				return this._inActive;
			}
			set
			{
				if ((this._inActive != value))
				{
					this._inActive = value;
				}
			}
		}
	}
	
	public partial class GetUserByUserNameResult
	{
		
		private int _userId;
		
		private string _username;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _avatar;
		
		private int _points;
		
		private int _money;
		
		private int _gamesPlayed;
		
		private int _leagueName;
		
		private int _winNum;
		
		private int _HighestCashGainInGame;
		
		private int _TotalProfit;
		
		private bool _inActive;
		
		public GetUserByUserNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this._userId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this._password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this._avatar = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_points", DbType="Int NOT NULL")]
		public int points
		{
			get
			{
				return this._points;
			}
			set
			{
				if ((this._points != value))
				{
					this._points = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_money", DbType="Int NOT NULL")]
		public int money
		{
			get
			{
				return this._money;
			}
			set
			{
				if ((this._money != value))
				{
					this._money = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gamesPlayed", DbType="Int NOT NULL")]
		public int gamesPlayed
		{
			get
			{
				return this._gamesPlayed;
			}
			set
			{
				if ((this._gamesPlayed != value))
				{
					this._gamesPlayed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueName", DbType="Int NOT NULL")]
		public int leagueName
		{
			get
			{
				return this._leagueName;
			}
			set
			{
				if ((this._leagueName != value))
				{
					this._leagueName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winNum", DbType="Int NOT NULL")]
		public int winNum
		{
			get
			{
				return this._winNum;
			}
			set
			{
				if ((this._winNum != value))
				{
					this._winNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighestCashGainInGame", DbType="Int NOT NULL")]
		public int HighestCashGainInGame
		{
			get
			{
				return this._HighestCashGainInGame;
			}
			set
			{
				if ((this._HighestCashGainInGame != value))
				{
					this._HighestCashGainInGame = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProfit", DbType="Int NOT NULL")]
		public int TotalProfit
		{
			get
			{
				return this._TotalProfit;
			}
			set
			{
				if ((this._TotalProfit != value))
				{
					this._TotalProfit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inActive", DbType="Bit NOT NULL")]
		public bool inActive
		{
			get
			{
				return this._inActive;
			}
			set
			{
				if ((this._inActive != value))
				{
					this._inActive = value;
				}
			}
		}
	}
	
	public partial class GetAllActiveGameRoomsResult
	{
		
		private int _RoomId;
		
		private int _GameId;
		
		private string _Replay;
		
		private System.Xml.Linq.XElement _GameXML;
		
		private bool _isActive;
		
		public GetAllActiveGameRoomsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replay", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Replay
		{
			get
			{
				return this._Replay;
			}
			set
			{
				if ((this._Replay != value))
				{
					this._Replay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this._isActive = value;
				}
			}
		}
	}
	
	public partial class GetAllSpectableGameRoomsResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetAllSpectableGameRoomsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomReplyByIdResult
	{
		
		private int _RoomId;
		
		private string _Replay;
		
		public GetGameRoomReplyByIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replay", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Replay
		{
			get
			{
				return this._Replay;
			}
			set
			{
				if ((this._Replay != value))
				{
					this._Replay = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByBuyInPolicyResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByBuyInPolicyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByGameModeResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByGameModeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByMaxPlayersResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByMaxPlayersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByMinBetResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByMinBetResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByMinPlayersResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByMinPlayersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByPotSizeResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByPotSizeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomsByStaringChipResult
	{
		
		private int _RoomId;
		
		private System.Xml.Linq.XElement _GameXML;
		
		public GetGameRoomsByStaringChipResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
	}
	
	public partial class GetGameModeValByNameResult
	{
		
		private int _Game_mode_value;
		
		public GetGameModeValByNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Game mode value]", Storage="_Game_mode_value", DbType="Int NOT NULL")]
		public int Game_mode_value
		{
			get
			{
				return this._Game_mode_value;
			}
			set
			{
				if ((this._Game_mode_value != value))
				{
					this._Game_mode_value = value;
				}
			}
		}
	}
	
	public partial class GetAllGameRoomsResult
	{
		
		private int _RoomId;
		
		private int _GameId;
		
		private string _Replay;
		
		private System.Xml.Linq.XElement _GameXML;
		
		private bool _isActive;
		
		public GetAllGameRoomsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replay", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Replay
		{
			get
			{
				return this._Replay;
			}
			set
			{
				if ((this._Replay != value))
				{
					this._Replay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this._isActive = value;
				}
			}
		}
	}
	
	public partial class GetLeageValByNameResult
	{
		
		private int _League_Value;
		
		public GetLeageValByNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[League Value]", Storage="_League_Value", DbType="Int NOT NULL")]
		public int League_Value
		{
			get
			{
				return this._League_Value;
			}
			set
			{
				if ((this._League_Value != value))
				{
					this._League_Value = value;
				}
			}
		}
	}
	
	public partial class GetGameRoomByIdResult
	{
		
		private int _RoomId;
		
		private int _GameId;
		
		private string _Replay;
		
		private System.Xml.Linq.XElement _GameXML;
		
		private bool _isActive;
		
		public GetGameRoomByIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this._RoomId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Replay", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Replay
		{
			get
			{
				return this._Replay;
			}
			set
			{
				if ((this._Replay != value))
				{
					this._Replay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameXML", DbType="Xml NOT NULL", CanBeNull=false)]
		public System.Xml.Linq.XElement GameXML
		{
			get
			{
				return this._GameXML;
			}
			set
			{
				if ((this._GameXML != value))
				{
					this._GameXML = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this._isActive = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
